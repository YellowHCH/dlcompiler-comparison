[[3, 224, 64, 7, 3, 2], [64, 56, 64, 1, 0, 1], [64, 56, 64, 3, 1, 1], [64, 56, 64, 3, 1, 1], [64, 56, 64, 3, 1, 1], [64, 56, 256, 1, 0, 1], [64, 56, 256, 1, 0, 1], [64, 56, 256, 1, 0, 1], [64, 56, 256, 1, 0, 1], [256, 56, 64, 1, 0, 1], [256, 56, 64, 1, 0, 1], [256, 56, 128, 1, 0, 1], [128, 56, 128, 3, 1, 2], [128, 28, 512, 1, 0, 1], [128, 28, 512, 1, 0, 1], [128, 28, 512, 1, 0, 1], [128, 28, 512, 1, 0, 1], [256, 56, 512, 1, 0, 2], [512, 28, 128, 1, 0, 1], [512, 28, 128, 1, 0, 1], [512, 28, 128, 1, 0, 1], [128, 28, 128, 3, 1, 1], [128, 28, 128, 3, 1, 1], [128, 28, 128, 3, 1, 1], [512, 28, 256, 1, 0, 1], [256, 28, 256, 3, 1, 2], [256, 14, 1024, 1, 0, 1], [256, 14, 1024, 1, 0, 1], [256, 14, 1024, 1, 0, 1], [256, 14, 1024, 1, 0, 1], [256, 14, 1024, 1, 0, 1], [512, 28, 1024, 1, 0, 2], [1024, 14, 256, 1, 0, 1], [1024, 14, 256, 1, 0, 1], [1024, 14, 256, 1, 0, 1], [1024, 14, 256, 1, 0, 1], [1024, 14, 256, 1, 0, 1], [256, 14, 256, 3, 1, 1], [256, 14, 256, 3, 1, 1], [256, 14, 256, 3, 1, 1], [256, 14, 256, 3, 1, 1], [256, 14, 256, 3, 1, 1], [1024, 14, 512, 1, 0, 1], [512, 14, 512, 3, 1, 2], [512, 7, 2048, 1, 0, 1], [512, 7, 2048, 1, 0, 1], [512, 7, 2048, 1, 0, 1], [1024, 14, 2048, 1, 0, 2], [2048, 7, 512, 1, 0, 1], [2048, 7, 512, 1, 0, 1], [512, 7, 512, 3, 1, 1], [512, 7, 512, 3, 1, 1]]
['conv', 'conv', 'conv', 'conv', 'conv', 'conv', 'conv', 'conv', 'conv', 'conv', 'conv', 'conv', 'conv', 'conv', 'conv', 'conv', 'conv', 'conv', 'conv', 'conv', 'conv', 'conv', 'conv', 'conv', 'conv', 'conv', 'conv', 'conv', 'conv', 'conv', 'conv', 'conv', 'conv', 'conv', 'conv', 'conv', 'conv', 'conv', 'conv', 'conv', 'conv', 'conv', 'conv', 'conv', 'conv', 'conv', 'conv', 'conv', 'conv', 'conv', 'conv', 'conv']
from x86-avx2
v0.0.4
def @main(%data: Tensor[(1, 3, 224, 224), float32], %conv2d_profile_weight: Tensor[(64, 3, 7, 7), float32]) -> Tensor[(1, 64, 112, 112), float32] {
  nn.conv2d(%data, %conv2d_profile_weight, strides=[2, 2], padding=[3, 3], channels=64, kernel_size=[7, 7]) /* ty=Tensor[(1, 64, 112, 112), float32] */
}

ctx on device x86-avx2
from x86-avx2
v0.0.4
def @main(%data: Tensor[(1, 64, 56, 56), float32], %conv2d_profile_weight: Tensor[(64, 64, 1, 1), float32]) -> Tensor[(1, 64, 56, 56), float32] {
  nn.conv2d(%data, %conv2d_profile_weight, channels=64, kernel_size=[1, 1]) /* ty=Tensor[(1, 64, 56, 56), float32] */
}

ctx on device x86-avx2
from x86-avx2
v0.0.4
def @main(%data: Tensor[(1, 64, 56, 56), float32], %conv2d_profile_weight: Tensor[(64, 64, 3, 3), float32]) -> Tensor[(1, 64, 56, 56), float32] {
  nn.conv2d(%data, %conv2d_profile_weight, padding=[1, 1], channels=64, kernel_size=[3, 3]) /* ty=Tensor[(1, 64, 56, 56), float32] */
}

ctx on device x86-avx2
from x86-avx2
v0.0.4
def @main(%data: Tensor[(1, 64, 56, 56), float32], %conv2d_profile_weight: Tensor[(64, 64, 3, 3), float32]) -> Tensor[(1, 64, 56, 56), float32] {
  nn.conv2d(%data, %conv2d_profile_weight, padding=[1, 1], channels=64, kernel_size=[3, 3]) /* ty=Tensor[(1, 64, 56, 56), float32] */
}

ctx on device x86-avx2
from x86-avx2
v0.0.4
def @main(%data: Tensor[(1, 64, 56, 56), float32], %conv2d_profile_weight: Tensor[(64, 64, 3, 3), float32]) -> Tensor[(1, 64, 56, 56), float32] {
  nn.conv2d(%data, %conv2d_profile_weight, padding=[1, 1], channels=64, kernel_size=[3, 3]) /* ty=Tensor[(1, 64, 56, 56), float32] */
}

ctx on device x86-avx2
from x86-avx2
v0.0.4
def @main(%data: Tensor[(1, 64, 56, 56), float32], %conv2d_profile_weight: Tensor[(256, 64, 1, 1), float32]) -> Tensor[(1, 256, 56, 56), float32] {
  nn.conv2d(%data, %conv2d_profile_weight, channels=256, kernel_size=[1, 1]) /* ty=Tensor[(1, 256, 56, 56), float32] */
}

ctx on device x86-avx2
from x86-avx2
v0.0.4
def @main(%data: Tensor[(1, 64, 56, 56), float32], %conv2d_profile_weight: Tensor[(256, 64, 1, 1), float32]) -> Tensor[(1, 256, 56, 56), float32] {
  nn.conv2d(%data, %conv2d_profile_weight, channels=256, kernel_size=[1, 1]) /* ty=Tensor[(1, 256, 56, 56), float32] */
}

ctx on device x86-avx2
from x86-avx2
v0.0.4
def @main(%data: Tensor[(1, 64, 56, 56), float32], %conv2d_profile_weight: Tensor[(256, 64, 1, 1), float32]) -> Tensor[(1, 256, 56, 56), float32] {
  nn.conv2d(%data, %conv2d_profile_weight, channels=256, kernel_size=[1, 1]) /* ty=Tensor[(1, 256, 56, 56), float32] */
}

ctx on device x86-avx2
from x86-avx2
v0.0.4
def @main(%data: Tensor[(1, 64, 56, 56), float32], %conv2d_profile_weight: Tensor[(256, 64, 1, 1), float32]) -> Tensor[(1, 256, 56, 56), float32] {
  nn.conv2d(%data, %conv2d_profile_weight, channels=256, kernel_size=[1, 1]) /* ty=Tensor[(1, 256, 56, 56), float32] */
}

ctx on device x86-avx2
from x86-avx2
v0.0.4
def @main(%data: Tensor[(1, 256, 56, 56), float32], %conv2d_profile_weight: Tensor[(64, 256, 1, 1), float32]) -> Tensor[(1, 64, 56, 56), float32] {
  nn.conv2d(%data, %conv2d_profile_weight, channels=64, kernel_size=[1, 1]) /* ty=Tensor[(1, 64, 56, 56), float32] */
}

ctx on device x86-avx2
from x86-avx2
v0.0.4
def @main(%data: Tensor[(1, 256, 56, 56), float32], %conv2d_profile_weight: Tensor[(64, 256, 1, 1), float32]) -> Tensor[(1, 64, 56, 56), float32] {
  nn.conv2d(%data, %conv2d_profile_weight, channels=64, kernel_size=[1, 1]) /* ty=Tensor[(1, 64, 56, 56), float32] */
}

ctx on device x86-avx2
from x86-avx2
v0.0.4
def @main(%data: Tensor[(1, 256, 56, 56), float32], %conv2d_profile_weight: Tensor[(128, 256, 1, 1), float32]) -> Tensor[(1, 128, 56, 56), float32] {
  nn.conv2d(%data, %conv2d_profile_weight, channels=128, kernel_size=[1, 1]) /* ty=Tensor[(1, 128, 56, 56), float32] */
}

ctx on device x86-avx2
from x86-avx2
v0.0.4
def @main(%data: Tensor[(1, 128, 56, 56), float32], %conv2d_profile_weight: Tensor[(128, 128, 3, 3), float32]) -> Tensor[(1, 128, 28, 28), float32] {
  nn.conv2d(%data, %conv2d_profile_weight, strides=[2, 2], padding=[1, 1], channels=128, kernel_size=[3, 3]) /* ty=Tensor[(1, 128, 28, 28), float32] */
}

ctx on device x86-avx2
from x86-avx2
v0.0.4
def @main(%data: Tensor[(1, 128, 28, 28), float32], %conv2d_profile_weight: Tensor[(512, 128, 1, 1), float32]) -> Tensor[(1, 512, 28, 28), float32] {
  nn.conv2d(%data, %conv2d_profile_weight, channels=512, kernel_size=[1, 1]) /* ty=Tensor[(1, 512, 28, 28), float32] */
}

ctx on device x86-avx2
from x86-avx2
v0.0.4
def @main(%data: Tensor[(1, 128, 28, 28), float32], %conv2d_profile_weight: Tensor[(512, 128, 1, 1), float32]) -> Tensor[(1, 512, 28, 28), float32] {
  nn.conv2d(%data, %conv2d_profile_weight, channels=512, kernel_size=[1, 1]) /* ty=Tensor[(1, 512, 28, 28), float32] */
}

ctx on device x86-avx2
from x86-avx2
v0.0.4
def @main(%data: Tensor[(1, 128, 28, 28), float32], %conv2d_profile_weight: Tensor[(512, 128, 1, 1), float32]) -> Tensor[(1, 512, 28, 28), float32] {
  nn.conv2d(%data, %conv2d_profile_weight, channels=512, kernel_size=[1, 1]) /* ty=Tensor[(1, 512, 28, 28), float32] */
}

ctx on device x86-avx2
from x86-avx2
v0.0.4
def @main(%data: Tensor[(1, 128, 28, 28), float32], %conv2d_profile_weight: Tensor[(512, 128, 1, 1), float32]) -> Tensor[(1, 512, 28, 28), float32] {
  nn.conv2d(%data, %conv2d_profile_weight, channels=512, kernel_size=[1, 1]) /* ty=Tensor[(1, 512, 28, 28), float32] */
}

ctx on device x86-avx2
from x86-avx2
v0.0.4
def @main(%data: Tensor[(1, 256, 56, 56), float32], %conv2d_profile_weight: Tensor[(512, 256, 1, 1), float32]) -> Tensor[(1, 512, 28, 28), float32] {
  nn.conv2d(%data, %conv2d_profile_weight, strides=[2, 2], channels=512, kernel_size=[1, 1]) /* ty=Tensor[(1, 512, 28, 28), float32] */
}

ctx on device x86-avx2
from x86-avx2
v0.0.4
def @main(%data: Tensor[(1, 512, 28, 28), float32], %conv2d_profile_weight: Tensor[(128, 512, 1, 1), float32]) -> Tensor[(1, 128, 28, 28), float32] {
  nn.conv2d(%data, %conv2d_profile_weight, channels=128, kernel_size=[1, 1]) /* ty=Tensor[(1, 128, 28, 28), float32] */
}

ctx on device x86-avx2
from x86-avx2
v0.0.4
def @main(%data: Tensor[(1, 512, 28, 28), float32], %conv2d_profile_weight: Tensor[(128, 512, 1, 1), float32]) -> Tensor[(1, 128, 28, 28), float32] {
  nn.conv2d(%data, %conv2d_profile_weight, channels=128, kernel_size=[1, 1]) /* ty=Tensor[(1, 128, 28, 28), float32] */
}

ctx on device x86-avx2
from x86-avx2
v0.0.4
def @main(%data: Tensor[(1, 512, 28, 28), float32], %conv2d_profile_weight: Tensor[(128, 512, 1, 1), float32]) -> Tensor[(1, 128, 28, 28), float32] {
  nn.conv2d(%data, %conv2d_profile_weight, channels=128, kernel_size=[1, 1]) /* ty=Tensor[(1, 128, 28, 28), float32] */
}

ctx on device x86-avx2
from x86-avx2
v0.0.4
def @main(%data: Tensor[(1, 128, 28, 28), float32], %conv2d_profile_weight: Tensor[(128, 128, 3, 3), float32]) -> Tensor[(1, 128, 28, 28), float32] {
  nn.conv2d(%data, %conv2d_profile_weight, padding=[1, 1], channels=128, kernel_size=[3, 3]) /* ty=Tensor[(1, 128, 28, 28), float32] */
}

ctx on device x86-avx2
from x86-avx2
v0.0.4
def @main(%data: Tensor[(1, 128, 28, 28), float32], %conv2d_profile_weight: Tensor[(128, 128, 3, 3), float32]) -> Tensor[(1, 128, 28, 28), float32] {
  nn.conv2d(%data, %conv2d_profile_weight, padding=[1, 1], channels=128, kernel_size=[3, 3]) /* ty=Tensor[(1, 128, 28, 28), float32] */
}

ctx on device x86-avx2
from x86-avx2
v0.0.4
def @main(%data: Tensor[(1, 128, 28, 28), float32], %conv2d_profile_weight: Tensor[(128, 128, 3, 3), float32]) -> Tensor[(1, 128, 28, 28), float32] {
  nn.conv2d(%data, %conv2d_profile_weight, padding=[1, 1], channels=128, kernel_size=[3, 3]) /* ty=Tensor[(1, 128, 28, 28), float32] */
}

ctx on device x86-avx2
from x86-avx2
v0.0.4
def @main(%data: Tensor[(1, 512, 28, 28), float32], %conv2d_profile_weight: Tensor[(256, 512, 1, 1), float32]) -> Tensor[(1, 256, 28, 28), float32] {
  nn.conv2d(%data, %conv2d_profile_weight, channels=256, kernel_size=[1, 1]) /* ty=Tensor[(1, 256, 28, 28), float32] */
}

ctx on device x86-avx2
from x86-avx2
v0.0.4
def @main(%data: Tensor[(1, 256, 28, 28), float32], %conv2d_profile_weight: Tensor[(256, 256, 3, 3), float32]) -> Tensor[(1, 256, 14, 14), float32] {
  nn.conv2d(%data, %conv2d_profile_weight, strides=[2, 2], padding=[1, 1], channels=256, kernel_size=[3, 3]) /* ty=Tensor[(1, 256, 14, 14), float32] */
}

ctx on device x86-avx2
from x86-avx2
v0.0.4
def @main(%data: Tensor[(1, 256, 14, 14), float32], %conv2d_profile_weight: Tensor[(1024, 256, 1, 1), float32]) -> Tensor[(1, 1024, 14, 14), float32] {
  nn.conv2d(%data, %conv2d_profile_weight, channels=1024, kernel_size=[1, 1]) /* ty=Tensor[(1, 1024, 14, 14), float32] */
}

ctx on device x86-avx2
from x86-avx2
v0.0.4
def @main(%data: Tensor[(1, 256, 14, 14), float32], %conv2d_profile_weight: Tensor[(1024, 256, 1, 1), float32]) -> Tensor[(1, 1024, 14, 14), float32] {
  nn.conv2d(%data, %conv2d_profile_weight, channels=1024, kernel_size=[1, 1]) /* ty=Tensor[(1, 1024, 14, 14), float32] */
}

ctx on device x86-avx2
from x86-avx2
v0.0.4
def @main(%data: Tensor[(1, 256, 14, 14), float32], %conv2d_profile_weight: Tensor[(1024, 256, 1, 1), float32]) -> Tensor[(1, 1024, 14, 14), float32] {
  nn.conv2d(%data, %conv2d_profile_weight, channels=1024, kernel_size=[1, 1]) /* ty=Tensor[(1, 1024, 14, 14), float32] */
}

ctx on device x86-avx2
from x86-avx2
v0.0.4
def @main(%data: Tensor[(1, 256, 14, 14), float32], %conv2d_profile_weight: Tensor[(1024, 256, 1, 1), float32]) -> Tensor[(1, 1024, 14, 14), float32] {
  nn.conv2d(%data, %conv2d_profile_weight, channels=1024, kernel_size=[1, 1]) /* ty=Tensor[(1, 1024, 14, 14), float32] */
}

ctx on device x86-avx2
from x86-avx2
v0.0.4
def @main(%data: Tensor[(1, 256, 14, 14), float32], %conv2d_profile_weight: Tensor[(1024, 256, 1, 1), float32]) -> Tensor[(1, 1024, 14, 14), float32] {
  nn.conv2d(%data, %conv2d_profile_weight, channels=1024, kernel_size=[1, 1]) /* ty=Tensor[(1, 1024, 14, 14), float32] */
}

ctx on device x86-avx2
from x86-avx2
v0.0.4
def @main(%data: Tensor[(1, 512, 28, 28), float32], %conv2d_profile_weight: Tensor[(1024, 512, 1, 1), float32]) -> Tensor[(1, 1024, 14, 14), float32] {
  nn.conv2d(%data, %conv2d_profile_weight, strides=[2, 2], channels=1024, kernel_size=[1, 1]) /* ty=Tensor[(1, 1024, 14, 14), float32] */
}

ctx on device x86-avx2
from x86-avx2
v0.0.4
def @main(%data: Tensor[(1, 1024, 14, 14), float32], %conv2d_profile_weight: Tensor[(256, 1024, 1, 1), float32]) -> Tensor[(1, 256, 14, 14), float32] {
  nn.conv2d(%data, %conv2d_profile_weight, channels=256, kernel_size=[1, 1]) /* ty=Tensor[(1, 256, 14, 14), float32] */
}

ctx on device x86-avx2
from x86-avx2
v0.0.4
def @main(%data: Tensor[(1, 1024, 14, 14), float32], %conv2d_profile_weight: Tensor[(256, 1024, 1, 1), float32]) -> Tensor[(1, 256, 14, 14), float32] {
  nn.conv2d(%data, %conv2d_profile_weight, channels=256, kernel_size=[1, 1]) /* ty=Tensor[(1, 256, 14, 14), float32] */
}

ctx on device x86-avx2
from x86-avx2
v0.0.4
def @main(%data: Tensor[(1, 1024, 14, 14), float32], %conv2d_profile_weight: Tensor[(256, 1024, 1, 1), float32]) -> Tensor[(1, 256, 14, 14), float32] {
  nn.conv2d(%data, %conv2d_profile_weight, channels=256, kernel_size=[1, 1]) /* ty=Tensor[(1, 256, 14, 14), float32] */
}

ctx on device x86-avx2
from x86-avx2
v0.0.4
def @main(%data: Tensor[(1, 1024, 14, 14), float32], %conv2d_profile_weight: Tensor[(256, 1024, 1, 1), float32]) -> Tensor[(1, 256, 14, 14), float32] {
  nn.conv2d(%data, %conv2d_profile_weight, channels=256, kernel_size=[1, 1]) /* ty=Tensor[(1, 256, 14, 14), float32] */
}

ctx on device x86-avx2
from x86-avx2
v0.0.4
def @main(%data: Tensor[(1, 1024, 14, 14), float32], %conv2d_profile_weight: Tensor[(256, 1024, 1, 1), float32]) -> Tensor[(1, 256, 14, 14), float32] {
  nn.conv2d(%data, %conv2d_profile_weight, channels=256, kernel_size=[1, 1]) /* ty=Tensor[(1, 256, 14, 14), float32] */
}

ctx on device x86-avx2
from x86-avx2
v0.0.4
def @main(%data: Tensor[(1, 256, 14, 14), float32], %conv2d_profile_weight: Tensor[(256, 256, 3, 3), float32]) -> Tensor[(1, 256, 14, 14), float32] {
  nn.conv2d(%data, %conv2d_profile_weight, padding=[1, 1], channels=256, kernel_size=[3, 3]) /* ty=Tensor[(1, 256, 14, 14), float32] */
}

ctx on device x86-avx2
from x86-avx2
v0.0.4
def @main(%data: Tensor[(1, 256, 14, 14), float32], %conv2d_profile_weight: Tensor[(256, 256, 3, 3), float32]) -> Tensor[(1, 256, 14, 14), float32] {
  nn.conv2d(%data, %conv2d_profile_weight, padding=[1, 1], channels=256, kernel_size=[3, 3]) /* ty=Tensor[(1, 256, 14, 14), float32] */
}

ctx on device x86-avx2
from x86-avx2
v0.0.4
def @main(%data: Tensor[(1, 256, 14, 14), float32], %conv2d_profile_weight: Tensor[(256, 256, 3, 3), float32]) -> Tensor[(1, 256, 14, 14), float32] {
  nn.conv2d(%data, %conv2d_profile_weight, padding=[1, 1], channels=256, kernel_size=[3, 3]) /* ty=Tensor[(1, 256, 14, 14), float32] */
}

ctx on device x86-avx2
from x86-avx2
v0.0.4
def @main(%data: Tensor[(1, 256, 14, 14), float32], %conv2d_profile_weight: Tensor[(256, 256, 3, 3), float32]) -> Tensor[(1, 256, 14, 14), float32] {
  nn.conv2d(%data, %conv2d_profile_weight, padding=[1, 1], channels=256, kernel_size=[3, 3]) /* ty=Tensor[(1, 256, 14, 14), float32] */
}

ctx on device x86-avx2
from x86-avx2
v0.0.4
def @main(%data: Tensor[(1, 256, 14, 14), float32], %conv2d_profile_weight: Tensor[(256, 256, 3, 3), float32]) -> Tensor[(1, 256, 14, 14), float32] {
  nn.conv2d(%data, %conv2d_profile_weight, padding=[1, 1], channels=256, kernel_size=[3, 3]) /* ty=Tensor[(1, 256, 14, 14), float32] */
}

ctx on device x86-avx2
from x86-avx2
v0.0.4
def @main(%data: Tensor[(1, 1024, 14, 14), float32], %conv2d_profile_weight: Tensor[(512, 1024, 1, 1), float32]) -> Tensor[(1, 512, 14, 14), float32] {
  nn.conv2d(%data, %conv2d_profile_weight, channels=512, kernel_size=[1, 1]) /* ty=Tensor[(1, 512, 14, 14), float32] */
}

ctx on device x86-avx2
from x86-avx2
v0.0.4
def @main(%data: Tensor[(1, 512, 14, 14), float32], %conv2d_profile_weight: Tensor[(512, 512, 3, 3), float32]) -> Tensor[(1, 512, 7, 7), float32] {
  nn.conv2d(%data, %conv2d_profile_weight, strides=[2, 2], padding=[1, 1], channels=512, kernel_size=[3, 3]) /* ty=Tensor[(1, 512, 7, 7), float32] */
}

ctx on device x86-avx2
from x86-avx2
v0.0.4
def @main(%data: Tensor[(1, 512, 7, 7), float32], %conv2d_profile_weight: Tensor[(2048, 512, 1, 1), float32]) -> Tensor[(1, 2048, 7, 7), float32] {
  nn.conv2d(%data, %conv2d_profile_weight, channels=2048, kernel_size=[1, 1]) /* ty=Tensor[(1, 2048, 7, 7), float32] */
}

ctx on device x86-avx2
from x86-avx2
v0.0.4
def @main(%data: Tensor[(1, 512, 7, 7), float32], %conv2d_profile_weight: Tensor[(2048, 512, 1, 1), float32]) -> Tensor[(1, 2048, 7, 7), float32] {
  nn.conv2d(%data, %conv2d_profile_weight, channels=2048, kernel_size=[1, 1]) /* ty=Tensor[(1, 2048, 7, 7), float32] */
}

ctx on device x86-avx2
from x86-avx2
v0.0.4
def @main(%data: Tensor[(1, 512, 7, 7), float32], %conv2d_profile_weight: Tensor[(2048, 512, 1, 1), float32]) -> Tensor[(1, 2048, 7, 7), float32] {
  nn.conv2d(%data, %conv2d_profile_weight, channels=2048, kernel_size=[1, 1]) /* ty=Tensor[(1, 2048, 7, 7), float32] */
}

ctx on device x86-avx2
from x86-avx2
v0.0.4
def @main(%data: Tensor[(1, 1024, 14, 14), float32], %conv2d_profile_weight: Tensor[(2048, 1024, 1, 1), float32]) -> Tensor[(1, 2048, 7, 7), float32] {
  nn.conv2d(%data, %conv2d_profile_weight, strides=[2, 2], channels=2048, kernel_size=[1, 1]) /* ty=Tensor[(1, 2048, 7, 7), float32] */
}

ctx on device x86-avx2
from x86-avx2
v0.0.4
def @main(%data: Tensor[(1, 2048, 7, 7), float32], %conv2d_profile_weight: Tensor[(512, 2048, 1, 1), float32]) -> Tensor[(1, 512, 7, 7), float32] {
  nn.conv2d(%data, %conv2d_profile_weight, channels=512, kernel_size=[1, 1]) /* ty=Tensor[(1, 512, 7, 7), float32] */
}

ctx on device x86-avx2
from x86-avx2
v0.0.4
def @main(%data: Tensor[(1, 2048, 7, 7), float32], %conv2d_profile_weight: Tensor[(512, 2048, 1, 1), float32]) -> Tensor[(1, 512, 7, 7), float32] {
  nn.conv2d(%data, %conv2d_profile_weight, channels=512, kernel_size=[1, 1]) /* ty=Tensor[(1, 512, 7, 7), float32] */
}

ctx on device x86-avx2
from x86-avx2
v0.0.4
def @main(%data: Tensor[(1, 512, 7, 7), float32], %conv2d_profile_weight: Tensor[(512, 512, 3, 3), float32]) -> Tensor[(1, 512, 7, 7), float32] {
  nn.conv2d(%data, %conv2d_profile_weight, padding=[1, 1], channels=512, kernel_size=[3, 3]) /* ty=Tensor[(1, 512, 7, 7), float32] */
}

ctx on device x86-avx2
from x86-avx2
v0.0.4
def @main(%data: Tensor[(1, 512, 7, 7), float32], %conv2d_profile_weight: Tensor[(512, 512, 3, 3), float32]) -> Tensor[(1, 512, 7, 7), float32] {
  nn.conv2d(%data, %conv2d_profile_weight, padding=[1, 1], channels=512, kernel_size=[3, 3]) /* ty=Tensor[(1, 512, 7, 7), float32] */
}

ctx on device x86-avx2
the total time of conv2ds : 204.32880642000003
