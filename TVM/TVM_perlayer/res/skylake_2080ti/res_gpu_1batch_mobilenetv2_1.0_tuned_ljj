[[3, 224, 32, 3, 1, 2], [32, 112, 32, 1, 0, 1], [32, 112, 32, 3, 1, 1], [32, 112, 16, 1, 0, 1], [16, 112, 96, 1, 0, 1], [96, 112, 96, 3, 1, 2], [96, 56, 24, 1, 0, 1], [24, 56, 144, 1, 0, 1], [144, 56, 144, 3, 1, 1], [144, 56, 24, 1, 0, 1], [144, 56, 144, 3, 1, 2], [144, 28, 32, 1, 0, 1], [32, 28, 192, 1, 0, 1], [192, 28, 192, 3, 1, 1], [192, 28, 32, 1, 0, 1], [192, 28, 192, 3, 1, 2], [192, 14, 64, 1, 0, 1], [64, 14, 384, 1, 0, 1], [384, 14, 384, 3, 1, 1], [384, 14, 64, 1, 0, 1], [384, 14, 96, 1, 0, 1], [96, 14, 576, 1, 0, 1], [576, 14, 576, 3, 1, 1], [576, 14, 96, 1, 0, 1], [576, 14, 576, 3, 1, 2], [576, 7, 160, 1, 0, 1], [160, 7, 960, 1, 0, 1], [960, 7, 960, 3, 1, 1], [960, 7, 160, 1, 0, 1], [960, 7, 320, 1, 0, 1], [320, 7, 1280, 1, 0, 1], [1280, 1, 1000, 1, 0, 1]]
['conv', 'conv', 'depthwise', 'conv', 'conv', 'depthwise', 'conv', 'conv', 'depthwise', 'conv', 'depthwise', 'conv', 'conv', 'depthwise', 'conv', 'depthwise', 'conv', 'conv', 'depthwise', 'conv', 'conv', 'conv', 'depthwise', 'conv', 'depthwise', 'conv', 'conv', 'depthwise', 'conv', 'conv', 'conv', 'conv']
v0.0.4
def @main(%data: Tensor[(1, 3, 224, 224), float32], %conv2d_profile_weight: Tensor[(32, 3, 3, 3), float32]) -> Tensor[(1, 32, 112, 112), float32] {
  nn.conv2d(%data, %conv2d_profile_weight, strides=[2, 2], padding=[1, 1], channels=32, kernel_size=[3, 3]) /* ty=Tensor[(1, 32, 112, 112), float32] */
}

ctx on device gpu
v0.0.4
def @main(%data: Tensor[(1, 32, 112, 112), float32], %conv2d_profile_weight: Tensor[(32, 32, 1, 1), float32]) -> Tensor[(1, 32, 112, 112), float32] {
  nn.conv2d(%data, %conv2d_profile_weight, channels=32, kernel_size=[1, 1]) /* ty=Tensor[(1, 32, 112, 112), float32] */
}

ctx on device gpu
build depthwise net
v0.0.4
def @main(%data: Tensor[(1, 32, 112, 112), float32], %depthwise_profile_weight: Tensor[(32, 1, 3, 3), float32]) -> Tensor[(1, 32, 112, 112), float32] {
  nn.conv2d(%data, %depthwise_profile_weight, padding=[1, 1], groups=32, channels=32, kernel_size=[3, 3]) /* ty=Tensor[(1, 32, 112, 112), float32] */
}

ctx on device gpu
v0.0.4
def @main(%data: Tensor[(1, 32, 112, 112), float32], %conv2d_profile_weight: Tensor[(16, 32, 1, 1), float32]) -> Tensor[(1, 16, 112, 112), float32] {
  nn.conv2d(%data, %conv2d_profile_weight, channels=16, kernel_size=[1, 1]) /* ty=Tensor[(1, 16, 112, 112), float32] */
}

ctx on device gpu
v0.0.4
def @main(%data: Tensor[(1, 16, 112, 112), float32], %conv2d_profile_weight: Tensor[(96, 16, 1, 1), float32]) -> Tensor[(1, 96, 112, 112), float32] {
  nn.conv2d(%data, %conv2d_profile_weight, channels=96, kernel_size=[1, 1]) /* ty=Tensor[(1, 96, 112, 112), float32] */
}

ctx on device gpu
build depthwise net
v0.0.4
def @main(%data: Tensor[(1, 96, 112, 112), float32], %depthwise_profile_weight: Tensor[(96, 1, 3, 3), float32]) -> Tensor[(1, 96, 56, 56), float32] {
  nn.conv2d(%data, %depthwise_profile_weight, strides=[2, 2], padding=[1, 1], groups=96, channels=96, kernel_size=[3, 3]) /* ty=Tensor[(1, 96, 56, 56), float32] */
}

ctx on device gpu
v0.0.4
def @main(%data: Tensor[(1, 96, 56, 56), float32], %conv2d_profile_weight: Tensor[(24, 96, 1, 1), float32]) -> Tensor[(1, 24, 56, 56), float32] {
  nn.conv2d(%data, %conv2d_profile_weight, channels=24, kernel_size=[1, 1]) /* ty=Tensor[(1, 24, 56, 56), float32] */
}

ctx on device gpu
v0.0.4
def @main(%data: Tensor[(1, 24, 56, 56), float32], %conv2d_profile_weight: Tensor[(144, 24, 1, 1), float32]) -> Tensor[(1, 144, 56, 56), float32] {
  nn.conv2d(%data, %conv2d_profile_weight, channels=144, kernel_size=[1, 1]) /* ty=Tensor[(1, 144, 56, 56), float32] */
}

ctx on device gpu
build depthwise net
v0.0.4
def @main(%data: Tensor[(1, 144, 56, 56), float32], %depthwise_profile_weight: Tensor[(144, 1, 3, 3), float32]) -> Tensor[(1, 144, 56, 56), float32] {
  nn.conv2d(%data, %depthwise_profile_weight, padding=[1, 1], groups=144, channels=144, kernel_size=[3, 3]) /* ty=Tensor[(1, 144, 56, 56), float32] */
}

ctx on device gpu
v0.0.4
def @main(%data: Tensor[(1, 144, 56, 56), float32], %conv2d_profile_weight: Tensor[(24, 144, 1, 1), float32]) -> Tensor[(1, 24, 56, 56), float32] {
  nn.conv2d(%data, %conv2d_profile_weight, channels=24, kernel_size=[1, 1]) /* ty=Tensor[(1, 24, 56, 56), float32] */
}

ctx on device gpu
build depthwise net
v0.0.4
def @main(%data: Tensor[(1, 144, 56, 56), float32], %depthwise_profile_weight: Tensor[(144, 1, 3, 3), float32]) -> Tensor[(1, 144, 28, 28), float32] {
  nn.conv2d(%data, %depthwise_profile_weight, strides=[2, 2], padding=[1, 1], groups=144, channels=144, kernel_size=[3, 3]) /* ty=Tensor[(1, 144, 28, 28), float32] */
}

ctx on device gpu
v0.0.4
def @main(%data: Tensor[(1, 144, 28, 28), float32], %conv2d_profile_weight: Tensor[(32, 144, 1, 1), float32]) -> Tensor[(1, 32, 28, 28), float32] {
  nn.conv2d(%data, %conv2d_profile_weight, channels=32, kernel_size=[1, 1]) /* ty=Tensor[(1, 32, 28, 28), float32] */
}

ctx on device gpu
v0.0.4
def @main(%data: Tensor[(1, 32, 28, 28), float32], %conv2d_profile_weight: Tensor[(192, 32, 1, 1), float32]) -> Tensor[(1, 192, 28, 28), float32] {
  nn.conv2d(%data, %conv2d_profile_weight, channels=192, kernel_size=[1, 1]) /* ty=Tensor[(1, 192, 28, 28), float32] */
}

ctx on device gpu
build depthwise net
v0.0.4
def @main(%data: Tensor[(1, 192, 28, 28), float32], %depthwise_profile_weight: Tensor[(192, 1, 3, 3), float32]) -> Tensor[(1, 192, 28, 28), float32] {
  nn.conv2d(%data, %depthwise_profile_weight, padding=[1, 1], groups=192, channels=192, kernel_size=[3, 3]) /* ty=Tensor[(1, 192, 28, 28), float32] */
}

ctx on device gpu
v0.0.4
def @main(%data: Tensor[(1, 192, 28, 28), float32], %conv2d_profile_weight: Tensor[(32, 192, 1, 1), float32]) -> Tensor[(1, 32, 28, 28), float32] {
  nn.conv2d(%data, %conv2d_profile_weight, channels=32, kernel_size=[1, 1]) /* ty=Tensor[(1, 32, 28, 28), float32] */
}

ctx on device gpu
build depthwise net
v0.0.4
def @main(%data: Tensor[(1, 192, 28, 28), float32], %depthwise_profile_weight: Tensor[(192, 1, 3, 3), float32]) -> Tensor[(1, 192, 14, 14), float32] {
  nn.conv2d(%data, %depthwise_profile_weight, strides=[2, 2], padding=[1, 1], groups=192, channels=192, kernel_size=[3, 3]) /* ty=Tensor[(1, 192, 14, 14), float32] */
}

ctx on device gpu
v0.0.4
def @main(%data: Tensor[(1, 192, 14, 14), float32], %conv2d_profile_weight: Tensor[(64, 192, 1, 1), float32]) -> Tensor[(1, 64, 14, 14), float32] {
  nn.conv2d(%data, %conv2d_profile_weight, channels=64, kernel_size=[1, 1]) /* ty=Tensor[(1, 64, 14, 14), float32] */
}

ctx on device gpu
v0.0.4
def @main(%data: Tensor[(1, 64, 14, 14), float32], %conv2d_profile_weight: Tensor[(384, 64, 1, 1), float32]) -> Tensor[(1, 384, 14, 14), float32] {
  nn.conv2d(%data, %conv2d_profile_weight, channels=384, kernel_size=[1, 1]) /* ty=Tensor[(1, 384, 14, 14), float32] */
}

ctx on device gpu
build depthwise net
v0.0.4
def @main(%data: Tensor[(1, 384, 14, 14), float32], %depthwise_profile_weight: Tensor[(384, 1, 3, 3), float32]) -> Tensor[(1, 384, 14, 14), float32] {
  nn.conv2d(%data, %depthwise_profile_weight, padding=[1, 1], groups=384, channels=384, kernel_size=[3, 3]) /* ty=Tensor[(1, 384, 14, 14), float32] */
}

ctx on device gpu
v0.0.4
def @main(%data: Tensor[(1, 384, 14, 14), float32], %conv2d_profile_weight: Tensor[(64, 384, 1, 1), float32]) -> Tensor[(1, 64, 14, 14), float32] {
  nn.conv2d(%data, %conv2d_profile_weight, channels=64, kernel_size=[1, 1]) /* ty=Tensor[(1, 64, 14, 14), float32] */
}

ctx on device gpu
v0.0.4
def @main(%data: Tensor[(1, 384, 14, 14), float32], %conv2d_profile_weight: Tensor[(96, 384, 1, 1), float32]) -> Tensor[(1, 96, 14, 14), float32] {
  nn.conv2d(%data, %conv2d_profile_weight, channels=96, kernel_size=[1, 1]) /* ty=Tensor[(1, 96, 14, 14), float32] */
}

ctx on device gpu
v0.0.4
def @main(%data: Tensor[(1, 96, 14, 14), float32], %conv2d_profile_weight: Tensor[(576, 96, 1, 1), float32]) -> Tensor[(1, 576, 14, 14), float32] {
  nn.conv2d(%data, %conv2d_profile_weight, channels=576, kernel_size=[1, 1]) /* ty=Tensor[(1, 576, 14, 14), float32] */
}

ctx on device gpu
build depthwise net
v0.0.4
def @main(%data: Tensor[(1, 576, 14, 14), float32], %depthwise_profile_weight: Tensor[(576, 1, 3, 3), float32]) -> Tensor[(1, 576, 14, 14), float32] {
  nn.conv2d(%data, %depthwise_profile_weight, padding=[1, 1], groups=576, channels=576, kernel_size=[3, 3]) /* ty=Tensor[(1, 576, 14, 14), float32] */
}

ctx on device gpu
v0.0.4
def @main(%data: Tensor[(1, 576, 14, 14), float32], %conv2d_profile_weight: Tensor[(96, 576, 1, 1), float32]) -> Tensor[(1, 96, 14, 14), float32] {
  nn.conv2d(%data, %conv2d_profile_weight, channels=96, kernel_size=[1, 1]) /* ty=Tensor[(1, 96, 14, 14), float32] */
}

ctx on device gpu
build depthwise net
v0.0.4
def @main(%data: Tensor[(1, 576, 14, 14), float32], %depthwise_profile_weight: Tensor[(576, 1, 3, 3), float32]) -> Tensor[(1, 576, 7, 7), float32] {
  nn.conv2d(%data, %depthwise_profile_weight, strides=[2, 2], padding=[1, 1], groups=576, channels=576, kernel_size=[3, 3]) /* ty=Tensor[(1, 576, 7, 7), float32] */
}

ctx on device gpu
v0.0.4
def @main(%data: Tensor[(1, 576, 7, 7), float32], %conv2d_profile_weight: Tensor[(160, 576, 1, 1), float32]) -> Tensor[(1, 160, 7, 7), float32] {
  nn.conv2d(%data, %conv2d_profile_weight, channels=160, kernel_size=[1, 1]) /* ty=Tensor[(1, 160, 7, 7), float32] */
}

ctx on device gpu
v0.0.4
def @main(%data: Tensor[(1, 160, 7, 7), float32], %conv2d_profile_weight: Tensor[(960, 160, 1, 1), float32]) -> Tensor[(1, 960, 7, 7), float32] {
  nn.conv2d(%data, %conv2d_profile_weight, channels=960, kernel_size=[1, 1]) /* ty=Tensor[(1, 960, 7, 7), float32] */
}

ctx on device gpu
build depthwise net
v0.0.4
def @main(%data: Tensor[(1, 960, 7, 7), float32], %depthwise_profile_weight: Tensor[(960, 1, 3, 3), float32]) -> Tensor[(1, 960, 7, 7), float32] {
  nn.conv2d(%data, %depthwise_profile_weight, padding=[1, 1], groups=960, channels=960, kernel_size=[3, 3]) /* ty=Tensor[(1, 960, 7, 7), float32] */
}

ctx on device gpu
v0.0.4
def @main(%data: Tensor[(1, 960, 7, 7), float32], %conv2d_profile_weight: Tensor[(160, 960, 1, 1), float32]) -> Tensor[(1, 160, 7, 7), float32] {
  nn.conv2d(%data, %conv2d_profile_weight, channels=160, kernel_size=[1, 1]) /* ty=Tensor[(1, 160, 7, 7), float32] */
}

ctx on device gpu
v0.0.4
def @main(%data: Tensor[(1, 960, 7, 7), float32], %conv2d_profile_weight: Tensor[(320, 960, 1, 1), float32]) -> Tensor[(1, 320, 7, 7), float32] {
  nn.conv2d(%data, %conv2d_profile_weight, channels=320, kernel_size=[1, 1]) /* ty=Tensor[(1, 320, 7, 7), float32] */
}

ctx on device gpu
v0.0.4
def @main(%data: Tensor[(1, 320, 7, 7), float32], %conv2d_profile_weight: Tensor[(1280, 320, 1, 1), float32]) -> Tensor[(1, 1280, 7, 7), float32] {
  nn.conv2d(%data, %conv2d_profile_weight, channels=1280, kernel_size=[1, 1]) /* ty=Tensor[(1, 1280, 7, 7), float32] */
}

ctx on device gpu
v0.0.4
def @main(%data: Tensor[(1, 1280, 1, 1), float32], %conv2d_profile_weight: Tensor[(1000, 1280, 1, 1), float32]) -> Tensor[(1, 1000, 1, 1), float32] {
  nn.conv2d(%data, %conv2d_profile_weight, channels=1000, kernel_size=[1, 1]) /* ty=Tensor[(1, 1000, 1, 1), float32] */
}

ctx on device gpu
the total time of conv2ds : 0.7278621700000001
